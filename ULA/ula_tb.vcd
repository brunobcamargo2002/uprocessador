$date
  Fri Apr 19 15:10:12 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module ula_tb $end
$var reg 2 ! operation[1:0] $end
$var reg 16 " in_a[15:0] $end
$var reg 16 # in_b[15:0] $end
$var reg 16 $ saida[15:0] $end
$var reg 1 % is_zero $end
$scope module uut $end
$var reg 2 & operation[1:0] $end
$var reg 16 ' in_a[15:0] $end
$var reg 16 ( in_b[15:0] $end
$var reg 16 ) saida[15:0] $end
$var reg 1 * is_zero $end
$var reg 16 + result_adder[15:0] $end
$var reg 16 , result_subtracter[15:0] $end
$var reg 16 - result_and[15:0] $end
$var reg 16 . result_xor[15:0] $end
$scope module adder1 $end
$var reg 16 / in_a[15:0] $end
$var reg 16 0 in_b[15:0] $end
$var reg 16 1 result[15:0] $end
$upscope $end
$scope module subtracter1 $end
$var reg 16 2 in_a[15:0] $end
$var reg 16 3 in_b[15:0] $end
$var reg 16 4 result[15:0] $end
$upscope $end
$scope module and_op1 $end
$var reg 16 5 in_a[15:0] $end
$var reg 16 6 in_b[15:0] $end
$var reg 16 7 result[15:0] $end
$upscope $end
$scope module xor_op1 $end
$var reg 16 8 in_a[15:0] $end
$var reg 16 9 in_b[15:0] $end
$var reg 16 : result[15:0] $end
$var reg 16 ; aux[15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
bUU !
b0000000000001010 "
b0000000000000110 #
b0000000000000000 $
U%
bUU &
b0000000000001010 '
b0000000000000110 (
b0000000000000000 )
U*
b0000000000010000 +
b0000000000000100 ,
bUUUUUUUUUUUUUUUU -
b000000000000XXX0 .
b0000000000001010 /
b0000000000000110 0
b0000000000010000 1
b0000000000001010 2
b0000000000000110 3
b0000000000000100 4
b0000000000001010 5
b0000000000000110 6
b000000000000XXX0 7
b0000000000001010 8
b0000000000000110 9
b000000000000XXX0 :
bUUUUUUUUUUUUUUUU ;
#50000000
b00 !
b0000000000010000 $
b00 &
b0000000000010000 )
#100000000
b01 !
b0000000000000100 $
b01 &
b0000000000000100 )
#150000000
b10 !
bUUUUUUUUUUUUUUUU $
b10 &
bUUUUUUUUUUUUUUUU )
#200000000
b11 !
b000000000000XXX0 $
b11 &
b000000000000XXX0 )
#250000000
b0000100000001010 "
b0011100000000010 #
b00XXX0000000X0X0 $
b0000100000001010 '
b0011100000000010 (
b00XXX0000000X0X0 )
b0100000000001100 +
b1101000000001000 ,
b00XXX0000000X0X0 .
b0000100000001010 /
b0011100000000010 0
b0100000000001100 1
b0000100000001010 2
b0011100000000010 3
b1101000000001000 4
b0000100000001010 5
b0011100000000010 6
b00XXX0000000X0X0 7
b0000100000001010 8
b0011100000000010 9
b00XXX0000000X0X0 :
#300000000
b00 !
b0100000000001100 $
b00 &
b0100000000001100 )
#350000000
b01 !
b1101000000001000 $
b01 &
b1101000000001000 )
#400000000
b10 !
bUUUUUUUUUUUUUUUU $
b10 &
bUUUUUUUUUUUUUUUU )
#450000000
b11 !
b00XXX0000000X0X0 $
b11 &
b00XXX0000000X0X0 )
#500000000
b0000000000000011 "
b1111111111111110 #
bXXXXXXXXXXXXXXXX $
b0000000000000011 '
b1111111111111110 (
bXXXXXXXXXXXXXXXX )
b0000000000000001 +
b0000000000000101 ,
bXXXXXXXXXXXXXXXX .
b0000000000000011 /
b1111111111111110 0
b0000000000000001 1
b0000000000000011 2
b1111111111111110 3
b0000000000000101 4
b0000000000000011 5
b1111111111111110 6
bXXXXXXXXXXXXXXXX 7
b0000000000000011 8
b1111111111111110 9
bXXXXXXXXXXXXXXXX :
#550000000
b00 !
b0000000000000001 $
b00 &
b0000000000000001 )
#600000000
b01 !
b0000000000000101 $
b01 &
b0000000000000101 )
#650000000
