$date
  Wed May 08 17:51:08 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module pc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # wr_en $end
$var reg 16 $ data_out[15:0] $end
$scope module uut $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$var reg 1 ' wr_en $end
$var reg 16 ( data_out[15:0] $end
$var reg 16 ) data_in[15:0] $end
$var reg 16 * data_out_s[15:0] $end
$scope module pc $end
$var reg 1 + clk $end
$var reg 1 , rst $end
$var reg 1 - wr_en $end
$var reg 16 . data_in[15:0] $end
$var reg 16 / data_out[15:0] $end
$var reg 16 0 reg[15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
1"
U#
b0000000000000000 $
0%
1&
U'
b0000000000000000 (
b0000000000000001 )
b0000000000000000 *
0+
1,
1-
b0000000000000001 .
b0000000000000000 /
b0000000000000000 0
#50000000
1!
0"
b0000000000000001 $
1%
0&
b0000000000000001 (
b0000000000000010 )
b0000000000000001 *
1+
0,
b0000000000000010 .
b0000000000000001 /
b0000000000000001 0
#100000000
0!
0%
0+
#150000000
1!
b0000000000000010 $
1%
b0000000000000010 (
b0000000000000011 )
b0000000000000010 *
1+
b0000000000000011 .
b0000000000000010 /
b0000000000000010 0
#200000000
0!
0%
0+
#250000000
1!
b0000000000000011 $
1%
b0000000000000011 (
b0000000000000100 )
b0000000000000011 *
1+
b0000000000000100 .
b0000000000000011 /
b0000000000000011 0
#300000000
0!
0%
0+
#350000000
1!
b0000000000000100 $
1%
b0000000000000100 (
b0000000000000101 )
b0000000000000100 *
1+
b0000000000000101 .
b0000000000000100 /
b0000000000000100 0
#400000000
0!
0%
0+
#450000000
1!
b0000000000000101 $
1%
b0000000000000101 (
b0000000000000110 )
b0000000000000101 *
1+
b0000000000000110 .
b0000000000000101 /
b0000000000000101 0
#500000000
