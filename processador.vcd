$date
  Wed May 15 22:37:34 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module processador $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 2 # estado_out[1:0] $end
$var reg 16 $ pc_out[15:0] $end
$var reg 16 % instruction_reg_out[15:0] $end
$var reg 16 & acumulador_out[15:0] $end
$var reg 16 ' ula_out[15:0] $end
$var reg 16 ( r0[15:0] $end
$var reg 16 ) r1[15:0] $end
$var reg 16 * r2[15:0] $end
$var reg 16 + r3[15:0] $end
$var reg 16 , r4[15:0] $end
$var reg 16 - r5[15:0] $end
$var reg 16 . r6[15:0] $end
$var reg 16 / r7[15:0] $end
$var reg 16 0 in_a[15:0] $end
$var reg 16 1 in_b[15:0] $end
$var reg 16 2 ulaout[15:0] $end
$var reg 1 3 is_zero $end
$var reg 2 4 operation_ula[1:0] $end
$var reg 16 5 rega_data_out[15:0] $end
$var reg 16 6 regb_data_out[15:0] $end
$var reg 16 7 write_data_s[15:0] $end
$var reg 3 8 write_register_s[2:0] $end
$var reg 3 9 ra_address[2:0] $end
$var reg 3 : rb_address[2:0] $end
$var reg 1 ; wr_en_s $end
$var reg 9 < const[8:0] $end
$var reg 16 = data_out_instruction_reg[15:0] $end
$var reg 16 > data_in_instruction_reg[15:0] $end
$var reg 4 ? opcode[3:0] $end
$var reg 1 @ wr_en_instruction_reg $end
$var reg 1 A wr_en_accumulator $end
$var reg 16 B data_in_accumulator[15:0] $end
$var reg 16 C data_out_accumulator[15:0] $end
$var reg 16 D data_out_proto_control[15:0] $end
$var reg 1 E is_branch_s $end
$var reg 7 F branch_address_s[6:0] $end
$var reg 1 G wr_en_proto_control $end
$var reg 2 H estado_s[1:0] $end
$scope module ula_1 $end
$var reg 2 I operation[1:0] $end
$var reg 16 J in_a[15:0] $end
$var reg 16 K in_b[15:0] $end
$var reg 16 L ulaout[15:0] $end
$var reg 1 M is_zero $end
$var reg 16 N result_adder[15:0] $end
$var reg 16 O result_subtracter[15:0] $end
$var reg 16 P result_and[15:0] $end
$var reg 16 Q result_xor[15:0] $end
$scope module adder1 $end
$var reg 16 R in_a[15:0] $end
$var reg 16 S in_b[15:0] $end
$var reg 16 T result[15:0] $end
$upscope $end
$scope module subtracter1 $end
$var reg 16 U in_a[15:0] $end
$var reg 16 V in_b[15:0] $end
$var reg 16 W result[15:0] $end
$upscope $end
$scope module and_op1 $end
$var reg 16 X in_a[15:0] $end
$var reg 16 Y in_b[15:0] $end
$var reg 16 Z result[15:0] $end
$upscope $end
$scope module xor_op1 $end
$var reg 16 [ in_a[15:0] $end
$var reg 16 \ in_b[15:0] $end
$var reg 16 ] result[15:0] $end
$var reg 16 ^ aux[15:0] $end
$upscope $end
$upscope $end
$scope module reg_bd_1 $end
$var reg 3 _ read_r0[2:0] $end
$var reg 3 ` read_r1[2:0] $end
$var reg 1 a wr_en $end
$var reg 3 b write_register[2:0] $end
$var reg 16 c write_data[15:0] $end
$var reg 1 d clk $end
$var reg 1 e rst $end
$var reg 16 f read_data0[15:0] $end
$var reg 16 g read_data1[15:0] $end
$var reg 16 h r0[15:0] $end
$var reg 16 i r1[15:0] $end
$var reg 16 j r2[15:0] $end
$var reg 16 k r3[15:0] $end
$var reg 16 l r4[15:0] $end
$var reg 16 m r5[15:0] $end
$var reg 16 n r6[15:0] $end
$var reg 16 o r7[15:0] $end
$var reg 16 p reg0_out[15:0] $end
$var reg 16 q reg1_out[15:0] $end
$var reg 16 r reg2_out[15:0] $end
$var reg 16 s reg3_out[15:0] $end
$var reg 16 t reg4_out[15:0] $end
$var reg 16 u reg5_out[15:0] $end
$var reg 16 v reg6_out[15:0] $end
$var reg 16 w reg7_out[15:0] $end
$var reg 16 x reg0_in[15:0] $end
$var reg 16 y reg1_in[15:0] $end
$var reg 16 z reg2_in[15:0] $end
$var reg 16 { reg3_in[15:0] $end
$var reg 16 | reg4_in[15:0] $end
$var reg 16 } reg5_in[15:0] $end
$var reg 16 !" reg6_in[15:0] $end
$var reg 16 "" reg7_in[15:0] $end
$var reg 1 #" wr_en0 $end
$var reg 1 $" wr_en1 $end
$var reg 1 %" wr_en2 $end
$var reg 1 &" wr_en3 $end
$var reg 1 '" wr_en4 $end
$var reg 1 (" wr_en5 $end
$var reg 1 )" wr_en6 $end
$var reg 1 *" wr_en7 $end
$scope module reg0 $end
$var reg 1 +" clk $end
$var reg 1 ," rst $end
$var reg 1 -" wr_en $end
$var reg 16 ." data_in[15:0] $end
$var reg 16 /" data_out[15:0] $end
$var reg 16 0" reg[15:0] $end
$upscope $end
$scope module reg1 $end
$var reg 1 1" clk $end
$var reg 1 2" rst $end
$var reg 1 3" wr_en $end
$var reg 16 4" data_in[15:0] $end
$var reg 16 5" data_out[15:0] $end
$var reg 16 6" reg[15:0] $end
$upscope $end
$scope module reg2 $end
$var reg 1 7" clk $end
$var reg 1 8" rst $end
$var reg 1 9" wr_en $end
$var reg 16 :" data_in[15:0] $end
$var reg 16 ;" data_out[15:0] $end
$var reg 16 <" reg[15:0] $end
$upscope $end
$scope module reg3 $end
$var reg 1 =" clk $end
$var reg 1 >" rst $end
$var reg 1 ?" wr_en $end
$var reg 16 @" data_in[15:0] $end
$var reg 16 A" data_out[15:0] $end
$var reg 16 B" reg[15:0] $end
$upscope $end
$scope module reg4 $end
$var reg 1 C" clk $end
$var reg 1 D" rst $end
$var reg 1 E" wr_en $end
$var reg 16 F" data_in[15:0] $end
$var reg 16 G" data_out[15:0] $end
$var reg 16 H" reg[15:0] $end
$upscope $end
$scope module beg5 $end
$var reg 1 I" clk $end
$var reg 1 J" rst $end
$var reg 1 K" wr_en $end
$var reg 16 L" data_in[15:0] $end
$var reg 16 M" data_out[15:0] $end
$var reg 16 N" reg[15:0] $end
$upscope $end
$scope module beg6 $end
$var reg 1 O" clk $end
$var reg 1 P" rst $end
$var reg 1 Q" wr_en $end
$var reg 16 R" data_in[15:0] $end
$var reg 16 S" data_out[15:0] $end
$var reg 16 T" reg[15:0] $end
$upscope $end
$scope module beg7 $end
$var reg 1 U" clk $end
$var reg 1 V" rst $end
$var reg 1 W" wr_en $end
$var reg 16 X" data_in[15:0] $end
$var reg 16 Y" data_out[15:0] $end
$var reg 16 Z" reg[15:0] $end
$upscope $end
$upscope $end
$scope module instruction_reg $end
$var reg 1 [" clk $end
$var reg 1 \" rst $end
$var reg 1 ]" wr_en $end
$var reg 16 ^" data_in[15:0] $end
$var reg 16 _" data_out[15:0] $end
$var reg 16 `" reg[15:0] $end
$upscope $end
$scope module accumulator $end
$var reg 1 a" clk $end
$var reg 1 b" rst $end
$var reg 1 c" wr_en $end
$var reg 16 d" data_in[15:0] $end
$var reg 16 e" data_out[15:0] $end
$var reg 16 f" reg[15:0] $end
$upscope $end
$scope module proto_control_1 $end
$var reg 1 g" clk $end
$var reg 1 h" rst $end
$var reg 1 i" wr_en $end
$var reg 1 j" is_branch $end
$var reg 7 k" branch_address[6:0] $end
$var reg 2 l" estado[1:0] $end
$var reg 16 m" data_out[15:0] $end
$var reg 7 n" data_in_pc[6:0] $end
$var reg 7 o" data_out_pc[6:0] $end
$var reg 7 p" address_rom[6:0] $end
$var reg 16 q" data_out_rom[15:0] $end
$var reg 2 r" estado_s[1:0] $end
$var reg 7 s" new_address[6:0] $end
$scope module pc $end
$var reg 1 t" clk $end
$var reg 1 u" rst $end
$var reg 1 v" wr_en $end
$var reg 7 w" data_in[6:0] $end
$var reg 7 x" data_out[6:0] $end
$var reg 7 y" reg[6:0] $end
$upscope $end
$scope module rom_1 $end
$var reg 1 z" clk $end
$var reg 7 {" address[6:0] $end
$var reg 16 |" data[15:0] $end
$upscope $end
$upscope $end
$scope module three_state_machine_1 $end
$var reg 1 }" clk $end
$var reg 1 !# rst $end
$var reg 2 "# estado[1:0] $end
$var reg 2 ## estado_s[1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
U!
U"
bUU #
bUUUUUUUUUUUUUUUU $
bUUUUUUUUUUUUUUUU %
bUUUUUUUUUUUUUUUU &
bXXXXXXXXXXXXXXXX '
bUUUUUUUUUUUUUUUU (
bUUUUUUUUUUUUUUUU )
bUUUUUUUUUUUUUUUU *
bUUUUUUUUUUUUUUUU +
bUUUUUUUUUUUUUUUU ,
bUUUUUUUUUUUUUUUU -
bUUUUUUUUUUUUUUUU .
bUUUUUUUUUUUUUUUU /
bUUUUUUUUUUUUUUUU 0
b0000000000000000 1
bXXXXXXXXXXXXXXXX 2
U3
b01 4
b0000000000000000 5
b0000000000000000 6
b0000000UUUUUUUUU 7
bUUU 8
bUUU 9
bUUU :
0;
bUUUUUUUUU <
bUUUUUUUUUUUUUUUU =
bUUUUUUUUUUUUUUUU >
bUUUU ?
U@
1A
bXXXXXXXXXXXXXXXX B
bUUUUUUUUUUUUUUUU C
bUUUUUUUUUUUUUUUU D
0E
bUUUUUUU F
UG
bUU H
b01 I
bUUUUUUUUUUUUUUUU J
b0000000000000000 K
bXXXXXXXXXXXXXXXX L
UM
bXXXXXXXXXXXXXXXX N
bXXXXXXXXXXXXXXXX O
bUUUUUUUUUUUUUUUU P
bUUUUUUUUUUUUUUUU Q
bUUUUUUUUUUUUUUUU R
b0000000000000000 S
bXXXXXXXXXXXXXXXX T
bUUUUUUUUUUUUUUUU U
b0000000000000000 V
bXXXXXXXXXXXXXXXX W
bUUUUUUUUUUUUUUUU X
b0000000000000000 Y
bUUUUUUUUUUUUUUUU Z
bUUUUUUUUUUUUUUUU [
b0000000000000000 \
bUUUUUUUUUUUUUUUU ]
bUUUUUUUUUUUUUUUU ^
bUUU _
bUUU `
0a
bUUU b
b0000000UUUUUUUUU c
Ud
Ue
b0000000000000000 f
b0000000000000000 g
bUUUUUUUUUUUUUUUU h
bUUUUUUUUUUUUUUUU i
bUUUUUUUUUUUUUUUU j
bUUUUUUUUUUUUUUUU k
bUUUUUUUUUUUUUUUU l
bUUUUUUUUUUUUUUUU m
bUUUUUUUUUUUUUUUU n
bUUUUUUUUUUUUUUUU o
bUUUUUUUUUUUUUUUU p
bUUUUUUUUUUUUUUUU q
bUUUUUUUUUUUUUUUU r
bUUUUUUUUUUUUUUUU s
bUUUUUUUUUUUUUUUU t
bUUUUUUUUUUUUUUUU u
bUUUUUUUUUUUUUUUU v
bUUUUUUUUUUUUUUUU w
b0000000000000000 x
b0000000UUUUUUUUU y
b0000000UUUUUUUUU z
b0000000UUUUUUUUU {
b0000000UUUUUUUUU |
b0000000UUUUUUUUU }
b0000000UUUUUUUUU !"
b0000000UUUUUUUUU ""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
U+"
U,"
0-"
b0000000000000000 ."
bUUUUUUUUUUUUUUUU /"
bUUUUUUUUUUUUUUUU 0"
U1"
U2"
03"
b0000000UUUUUUUUU 4"
bUUUUUUUUUUUUUUUU 5"
bUUUUUUUUUUUUUUUU 6"
U7"
U8"
09"
b0000000UUUUUUUUU :"
bUUUUUUUUUUUUUUUU ;"
bUUUUUUUUUUUUUUUU <"
U="
U>"
0?"
b0000000UUUUUUUUU @"
bUUUUUUUUUUUUUUUU A"
bUUUUUUUUUUUUUUUU B"
UC"
UD"
0E"
b0000000UUUUUUUUU F"
bUUUUUUUUUUUUUUUU G"
bUUUUUUUUUUUUUUUU H"
UI"
UJ"
0K"
b0000000UUUUUUUUU L"
bUUUUUUUUUUUUUUUU M"
bUUUUUUUUUUUUUUUU N"
UO"
UP"
0Q"
b0000000UUUUUUUUU R"
bUUUUUUUUUUUUUUUU S"
bUUUUUUUUUUUUUUUU T"
UU"
UV"
0W"
b0000000UUUUUUUUU X"
bUUUUUUUUUUUUUUUU Y"
bUUUUUUUUUUUUUUUU Z"
U["
U\"
U]"
bUUUUUUUUUUUUUUUU ^"
bUUUUUUUUUUUUUUUU _"
bUUUUUUUUUUUUUUUU `"
Ua"
Ub"
1c"
bXXXXXXXXXXXXXXXX d"
bUUUUUUUUUUUUUUUU e"
bUUUUUUUUUUUUUUUU f"
Ug"
Uh"
Ui"
0j"
bUUUUUUU k"
bUU l"
bUUUUUUUUUUUUUUUU m"
bUUUUUUU n"
bUUUUUUU o"
bUUUUUUU p"
bUUUUUUUUUUUUUUUU q"
bUU r"
bXXXXXXX s"
Ut"
Uu"
Uv"
bUUUUUUU w"
bUUUUUUU x"
bUUUUUUU y"
Uz"
bUUUUUUU {"
bUUUUUUUUUUUUUUUU |"
U}"
U!#
bUU "#
bUU ##
